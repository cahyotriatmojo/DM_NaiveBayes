# -*- coding: utf-8 -*-
"""Copy of Naive_Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHzYxTu634I0UYJuvZ3NJAYHB6m95vyD
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('dataST1.csv')
X = dataset.iloc[:, [8, 9]].values
y = dataset.iloc[:, -1].values

"""Membaca atau mencetak kolom ke 2 dan 3...y untuk kolom terakhir"""

print (y)

print (X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

"""data 25% dari untuk testing dan sisa nya 75% digunakan utk training.....from sklearn sebagai liberi."""

print(y)

print(y_test)

"""ada 25 karena jumlah 25% dari total data."""

print(y_train)

"""ada 75 data karena dari 75%(training) total data....y kolom terakhir."""

print(X_train)

"""ada 9 data karena dari 75% total data..Karena jarak 30 - 90 jauh maka kita perlu melakukan scaling."""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_test)

print(X_train)

"""Hasil diatas udah di scaler."""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

"""Karena nomeric maka memerlukan GausssianNB....X dan y train diatas digunakan untuk menjenerit data latih nya/ utk pembeljarannya"""

y_pred = classifier.predict(X_test)

"""Sebagai memprediksi labelnya..yang diprediksi dari data test"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

"""Sebagai mengevaluasi model prediksi yg kita buat sebelumnya...berapa nilai akuratnya. Menghitung akurasi dari y_test(sebagai data asli) terhadap data prediksi.... 11+3+9+2 = 25 sesuai dari jumlah y_test. """

from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Klasifikasi Data dengan Naive Bayes (Training set)')
plt.xlabel('Kadar Gula')
plt.ylabel('Lemak Tubuh')
plt.legend()
plt.show()

"""red sebagai 0 dan green 1...1(yes) 0(no)"""

from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
            alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Klasifikasi Data dengan Naive Bayes (Test set)')
plt.xlabel('Kadar Gula')
plt.ylabel('Lemak Tubuh')
plt.legend()
plt.show()